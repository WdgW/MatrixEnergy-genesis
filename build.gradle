apply plugin: "java"

version '0.0.0'

sourceSets.main.java.srcDirs = ["src"]

repositories{
//    flatDir {
//        dirs 'W:\\Mindustry-146 (1)\\Mindustry-146'
//    }
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

java{
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_21
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"

    mindustryDataDir = "C:\\Users\\Administrator\\AppData\\Roaming\\Mindustry"

    //windows sucks
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs.addAll(['--release', '8'])
            options.encoding = 'UTF-8'
        }
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
//    compileOnly files("W:\\Mindustry-146 (1)\\Mindustry-146.jar")

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

//force arc version
configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

tasks.register('jarAndroid') {
    dependsOn "jar"

    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${base.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(projectDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }

}


tasks.register('deploy', Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${base.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}


tasks.register("runBatchScript", Exec) {
    workingDir 'W:\\game'
    commandLine 'W:\\game\\mindustry.bat'
}

tasks.register("cleanGameMode") {
    delete "$mindustryDataDir/mods/${project.archivesBaseName}Desktop.jar"
}

tasks.register("copyToGame"){
    copy{
        from("$buildDir/libs/${project.archivesBaseName}Desktop.jar")
        into("$mindustryDataDir/mods")
    }
}

tasks.register("playGame") {
    dependsOn jar


    println "buildDir: $buildDir; version: $version"


    doFirst {
        delete "$mindustryDataDir/mods/${project.archivesBaseName}Desktop.jar"
    }



    doLast {
        copy {
            from("$buildDir/libs/${project.archivesBaseName}Desktop.jar")
            into("$mindustryDataDir/mods")
        }

        exec {
            workingDir 'W:\\game'
            commandLine 'W:\\game\\mindustry.bat'
        }
    }
}
